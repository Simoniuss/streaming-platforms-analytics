{"version":3,"file":"static/js/990.0bcfc229.chunk.js","mappings":"oRASMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAEF,WAAYC,GAAO,IAAD,yBACd,cAAMA,IACDC,IAAMC,EAAAA,YACX,EAAKC,cAAgB,EAAKA,cAAcC,MAAnB,WAHP,EAgFlB,OA5EC,yCAED,WACIC,KAAKL,MAAMM,KAAMD,KAAKF,gBAAkBI,QAAQC,IAAI,aACvD,gCAEF,WACKH,KAAKL,MAAMM,KAAMD,KAAKF,gBAAkBI,QAAQC,IAAI,aACvD,2BAED,WAEI,IAAMC,EAAOJ,KAAKJ,IAAIS,QAElBC,GAAQC,EAAAA,EAAAA,KACPC,OAAO,CAAC,UAAW,QAAS,WAC5BC,MAAM,CAAE,UAAW,UAAW,YAI/BC,GAASC,EAAAA,EAAAA,IAAOX,KAAKL,MAAMM,MACX,SAAAW,GAAC,OAAIA,EAAEC,UACP,SAAAC,GAAC,OAAIA,EAAEC,YACP,SAAAD,GAAC,OAAIA,EAAEE,QACP,SAASF,GAAK,OAAOA,EAAEG,MAAM,MAG7CC,GAAOC,EAAAA,EAAAA,IAAUT,GACrBQ,EAAKE,KAAI,SAASN,GAAK,OAAOA,EAAE,OAGhCO,EAAAA,EAAAA,KACKC,KAAK,CAACtB,KAAKL,MAAM4B,MAAOvB,KAAKL,MAAM6B,SACnCC,aAAa,IACbC,aAAa,EAHlBL,CAICH,GAEDhB,QAAQC,IAAIH,KAAKL,MAAMM,KAAK,IAC5BC,QAAQC,IAAIe,EAAKS,WAGjBC,EAAAA,EAAAA,GAAOxB,GACFyB,UAAU,QACV5B,KAAKiB,EAAKY,eACVC,QACAC,OAAO,QACHC,KAAK,KAAK,SAAUnB,GAAK,OAAOA,EAAEoB,MAClCD,KAAK,KAAK,SAAUnB,GAAK,OAAOA,EAAEqB,MAClCF,KAAK,SAAS,SAAUnB,GAAK,OAAOA,EAAEsB,GAAKtB,EAAEoB,MAC7CD,KAAK,UAAU,SAAUnB,GAAK,OAAOA,EAAEuB,GAAKvB,EAAEqB,MAC9CG,MAAM,SAAU,SAChBA,MAAM,QAAQ,SAASxB,GACpB,OAAoB,IAAbA,EAAEU,OAAelB,EAAMQ,GACf,IAAbA,EAAEU,OAAelB,EAAMQ,EAAEyB,QACZ,IAAbzB,EAAEU,OAAelB,EAAMQ,EAAEyB,OAAOA,QAChC,kBAIdX,EAAAA,EAAAA,GAAOxB,GACFyB,UAAU,QACV5B,KAAKiB,EAAKY,eACVC,QACAC,OAAO,QACHC,KAAK,KAAK,SAASnB,GAAI,OAAOA,EAAEoB,MAChCD,KAAK,KAAK,SAASnB,GAAI,OAAOA,EAAEqB,MAChCK,MAAK,SAAS1B,GAAI,OAAOA,EAAEb,KAAK,MAChCgC,KAAK,YAAa,QAClBA,KAAK,cAAe,QACpBA,KAAK,OAAQ,WACzB,oBAEL,WACM,OACE,gBAAKrC,IAAKI,KAAKJ,IAAK6C,QAAO,cAASzC,KAAKL,MAAM4B,MAApB,YAA6BvB,KAAKL,MAAM6B,cAEvE,EAlFE9B,CAAgBG,EAAAA,WAqFtB","sources":["Dashboard/VisualizationComponents/Treemap.js"],"sourcesContent":["import React from 'react'\n\nimport { select } from 'd3-selection'\nimport { treemap, hierarchy } from 'd3-hierarchy'\nimport { rollup } from 'd3-array'\nimport { scaleOrdinal, scale } from 'd3-scale'\nimport { schemeCategory10 } from 'd3-scale-chromatic'\n\n\nclass Treemap extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.ref = React.createRef()\n        this.createTreemap = this.createTreemap.bind(this)\n    }\n\n    componentDidMount() {\n        this.props.data? this.createTreemap() : console.log('no data')\n    }\n\n   componentDidUpdate() {\n        this.props.data? this.createTreemap() : console.log('no data')\n    }\n\n    createTreemap() {\n        // refrence to svg\n        const node = this.ref.current\n\n        var color = scaleOrdinal()\n            .domain(['Netflix', 'Prime', 'Disney'])\n            .range([ \"#B81D24\", \"#00A8E1\", \"#113CCF\"])\n            //.unknown(\"#fff\")\n\n        // group by platform, type, and the first genre\n        var groups = rollup(this.props.data,\n                            v => v.length,\n                            d => d.platform,\n                            d => d.type,\n                            function(d) { return d.genre[0]; }\n                            );\n        // root hierarchy \n        var root = hierarchy(groups);\n        root.sum(function(d) { return d[1];});\n\n        // treemap layout\n        treemap()\n            .size([this.props.width, this.props.height])\n            .paddingOuter(15)\n            .paddingInner(3)\n        (root)\n        \n        console.log(this.props.data[1])\n        console.log(root.leaves())\n\n        // set rectangle of treemap\n        select(node)\n            .selectAll(\"rect\")\n            .data(root.descendants())\n            .enter()\n            .append(\"rect\")\n                .attr('x', function (d) { return d.x0; })\n                .attr('y', function (d) { return d.y0; })\n                .attr('width', function (d) { return d.x1 - d.x0; })\n                .attr('height', function (d) { return d.y1 - d.y0; })\n                .style(\"stroke\", \"white\")\n                .style(\"fill\", function(d) {\n                    return d.height === 2 ? color(d)\n                    : d.height === 1 ? color(d.parent)\n                    : d.height === 0 ? color(d.parent.parent) \n                    : 'transparent'\n                });\n\n        // set text of treemap\n        select(node)\n            .selectAll(\"text\")\n            .data(root.descendants())\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", function(d){ return d.x0})\n                .attr(\"y\", function(d){ return d.y0})\n                .text(function(d){ return d.data[0]})\n                .attr(\"font-size\", \"10px\")\n                .attr('font-weight', 'bold')\n                .attr(\"fill\", \"black\")\n    }\n\nrender() {\n      return (\n        <svg ref={this.ref} viewBox={`0 0 ${this.props.width} ${this.props.height}`} />\n      );\n   }\n}\n\nexport default Treemap;"],"names":["Treemap","props","ref","React","createTreemap","bind","this","data","console","log","node","current","color","scaleOrdinal","domain","range","groups","rollup","v","length","d","platform","type","genre","root","hierarchy","sum","treemap","size","width","height","paddingOuter","paddingInner","leaves","select","selectAll","descendants","enter","append","attr","x0","y0","x1","y1","style","parent","text","viewBox"],"sourceRoot":""}