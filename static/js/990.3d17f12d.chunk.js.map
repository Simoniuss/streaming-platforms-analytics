{"version":3,"file":"static/js/990.3d17f12d.chunk.js","mappings":"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","sources":["Dashboard/VisualizationComponents/Treemap.js"],"sourcesContent":["import React from 'react'\n\nimport { select } from 'd3-selection'\nimport { treemap, hierarchy } from 'd3-hierarchy'\nimport { rollup } from 'd3-array'\nimport { scaleOrdinal, scaleLinear } from 'd3-scale'\n\n\n\nclass Treemap extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            ref: React.createRef()\n        }\n        this.createTreemap = this.createTreemap.bind(this)\n    }\n\n    componentDidMount() {\n        this.props.data? this.createTreemap() : console.log('no data')\n    }\n\n   componentDidUpdate() {\n        this.props.data? this.createTreemap() : console.log('no data')\n    }\n\n    createTreemap() {\n        // refrence to svg\n        const node = this.state.ref.current\n\n        const x = scaleLinear().rangeRound([0, this.props.width])\n        const y = scaleLinear().rangeRound([0, this.props.height])\n\n        // color of boxes\n        var color = scaleOrdinal()\n            .domain(['Netflix', 'Prime', 'Disney'])\n            .range([ \"#B81D24\", \"#00A8E1\", \"#113CCF\"])\n\n        // group by platform, type, and the first genre\n        var groups = rollup(this.props.data,\n                            v => v.length,\n                            d => d.platform,\n                            d => d.type,\n                            function(d) { return d.genre[0]; }\n                            );\n\n        // root hierarchy \n        var root = hierarchy(groups);\n        root.sum(function(d) { return d[1];});\n\n        // treemap layout\n        treemap()\n            .size([this.props.width, this.props.height])\n            .paddingTop(30)\n            .paddingRight(3)\n            .paddingLeft(3)\n            .paddingBottom(3)\n            .paddingInner(10)\n        (root)\n        \n        //console.log(this.props.data[1])\n        //console.log(root.leaves())\n\n        // render the treemap given the svg node and the root from which draw rectangles\n        function render(root) {\n            var depth = root.depth+1\n\n            x.domain([root.x0, root.x1])\n            y.domain([root.y0, root.y1])\n\n            select(node)\n                .selectAll(\"rect\")\n                .data(root.descendants())\n                .enter()\n\n                // view only two levels of the hierarchy at the same time \n                .filter(d => d.depth === depth || d.depth === depth-1)\n                .append(\"rect\")\n                    /*.attr('x', function (d) { return d.x0; })\n                    .attr('y', function (d) { return d.y0; })\n                    .attr('width', function (d) { return d.x1 - d.x0; })\n                    .attr('height', function (d) { return d.y1 - d.y0; })\n                    */.attr('x', function (d) { return x(d.x0); })\n                    .attr('y', function (d) { return y(d.y0); })\n                    .attr('width', function (d) { return x(d.x1) - x(d.x0); })\n                    .attr('height', function (d) { return y(d.y1) - y(d.y0); })\n                    .style(\"stroke\", \"white\")\n                    .style(\"fill\", function(d) {\n                        return d.depth === 1 ? color(d.data[0]) \n                        : d.depth === 2 ? color(d.parent.data[0])\n                        : d.depth === 3 ? color(d.parent.parent.data[0])\n                        : 'transparent'\n                    })\n                    .attr('cursor', 'pointer')\n                    //.on('click', (event, d) => d === root? console.log('root') : console.log(d.data[0]));\n                    .on('click', (event, d) => d === root? zoomout(root) : zoomin(d));\n            \n            // set text of treemap\n            select(node)\n                .selectAll(\"text\")\n                .data(root.descendants())\n                .enter()\n                .filter(d => d.depth === depth || d.depth === depth-1)\n                .append(\"text\")\n                    .attr(\"x\", function(d){ return x(d.x0)})\n                    .attr(\"y\", function(d){ return y(d.y0)})\n                    .text(function(d){ return d.depth === 0? \"All: \" + d.value : d.data[0] + \": \" + d.value})\n                    .attr(\"font-size\", \"1.2em\")\n                    .attr('font-weight', 'bold')\n                    .attr(\"fill\", \"white\")\n        }\n\n        function zoomin(root) {\n            if (root.parent) { \n                select(node)\n                    .selectAll(\"*\")\n                    .remove()\n                render(root)\n            }\n        }\n\n        function zoomout(root) {\n            if (root.parent) {  \n                select(node)\n                    .selectAll(\"*\")\n                    .remove()\n                render(root.parent)\n            }\n        }\n\n\n        render(root)\n    }\n\nrender() {\n      return (\n        <svg ref={this.state.ref} viewBox={`-5 -20 ${this.props.width+50} ${this.props.height+20}`} />\n      );\n   }\n}\n\nexport default Treemap;"],"names":["Treemap","props","state","ref","React","createTreemap","bind","this","data","console","log","node","current","x","scaleLinear","rangeRound","width","y","height","color","scaleOrdinal","domain","range","groups","rollup","v","length","d","platform","type","genre","root","hierarchy","render","depth","x0","x1","y0","y1","select","selectAll","descendants","enter","filter","append","attr","style","parent","on","event","remove","zoomout","zoomin","text","value","sum","treemap","size","paddingTop","paddingRight","paddingLeft","paddingBottom","paddingInner","viewBox"],"sourceRoot":""}