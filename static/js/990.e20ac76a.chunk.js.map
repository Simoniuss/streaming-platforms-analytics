{"version":3,"file":"static/js/990.e20ac76a.chunk.js","mappings":"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","sources":["Dashboard/VisualizationComponents/Treemap.js"],"sourcesContent":["import React from 'react'\n\nimport { select } from 'd3-selection'\nimport { treemap, hierarchy } from 'd3-hierarchy'\nimport { rollup } from 'd3-array'\nimport { scaleOrdinal, scaleLinear } from 'd3-scale'\n\n\n\nclass Treemap extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            ref: React.createRef(),\n        }\n        this.createTreemap = this.createTreemap.bind(this)\n    }\n\n    componentDidMount() {\n        this.props.data? this.createTreemap() : console.log('no data')\n    }\n\n   componentDidUpdate() {\n        this.props.data? this.createTreemap() : console.log('no data')\n    }\n\n    createTreemap() {\n        // refrence to svg\n        const node = this.state.ref.current\n\n        const x = scaleLinear().rangeRound([0, this.props.width])\n        const y = scaleLinear().rangeRound([0, this.props.height])\n\n        var platform = this.props.platform\n        var type = this.props.type\n        var genre = this.props.genre\n\n        // color of boxes\n        var color = scaleOrdinal()\n            .domain(['Netflix', 'Prime', 'Disney'])\n            .range([ \"#B81D24\", \"#00A8E1\", \"#113CCF\"])\n\n        var txtColor = scaleOrdinal()\n            .domain(['Netflix', 'Prime', 'Disney'])\n            .range([ \"white\", \"black\", \"white\"])\n\n\n        // group by platform, type, and the first genre\n        var groups = rollup(this.props.data,\n                            v => v.length,\n                            d => d.platform,\n                            d => d.type,\n                            function(d) { return d.genre[0]; }\n                            )\n        \n        // root hierarchy \n        var root = hierarchy(groups);\n        root.sum(function(d) { return d[1];})\n            .sort((a, b) => b.height - a.height || b.value - a.value);\n\n        // treemap layout\n        treemap()\n            .size([this.props.width, this.props.height])\n            .paddingTop(20)\n            .paddingRight(1)\n            .paddingLeft(1)\n            .paddingBottom(2)\n            .paddingInner(0)\n        (root)\n        \n        //console.log(this.props.data[1])\n        //console.log(root.leaves())\n\n        // render the treemap given the svg node and the root from which draw rectangles\n        function render(root) {\n            var depth = root.depth+1\n\n            // used to make responsive the treemap\n            x.domain([root.x0, root.x1])\n            y.domain([root.y0, root.y1])\n\n            select(node)\n                .selectAll(\"rect\")\n                .data(root.descendants())\n                .enter()\n\n                // view only two levels of the hierarchy at the same time \n                .filter(d => d.depth === depth || d.depth === depth-1)\n                //.filter(d => d.data[0] === platform)\n                .append(\"rect\")\n                    .attr('x', function (d) { return x(d.x0); })\n                    .attr('y', function (d) { return y(d.y0); })\n                    .attr('width', function (d) { return x(d.x1) - x(d.x0); })\n                    .attr('height', function (d) { return y(d.y1) - y(d.y0); })\n                    .style(\"stroke\", \"white\")\n                    .style(\"fill\", function(d) {\n                        return d.depth === 1 ? color(d.data[0]) \n                        : d.depth === 2 ? color(d.parent.data[0])\n                        : d.depth === 3 ? color(d.parent.parent.data[0])\n                        : '#282626'\n                    })\n                    .attr('cursor', 'pointer')\n                    //.on('click', (event, d) => d === root? console.log('root') : console.log(d.data[0]));\n                    .on('click', function(event, d) { \n                        if (d === root) {\n                            zoomout(root);\n                        }\n                        else { \n                            zoomin(d);\n                        }})\n            \n            // set text of treemap\n            select(node)\n                .selectAll(\"text\")\n                .data(root.descendants())\n                .enter()\n                .filter(d => d.depth === depth || d.depth === depth-1)\n                .append(\"text\")\n                    .attr(\"x\", function(d){ return x(d.x0)+5})\n                    .attr(\"y\", function(d){ return y(d.y0)+15})\n                    .text(function(d){ \n                        return d.depth === 0? \"All: \" + d.value\n                        : x(d.x1)-x(d.x0) > 100? d.data[0] + \": \" + d.value\n                        : x(d.x1)-x(d.x0) > 50? d.data[0]\n                        : \"...\"\n                    })\n                    .attr(\"font-size\", function(d) {\n                        return x(d.x1)-x(d.x0) > 100 && y(d.y1)-y(d.y0) > 20? \"1em\"\n                        : x(d.x1)-x(d.x0) > 50 && y(d.y1)-y(d.y0) > 10? \"0.8em\"\n                        : \"0.3em\"})\n                    .attr('font-weight', 'bold')\n                    .attr(\"fill\", function(d) {\n                        return d.depth === 1 ? txtColor(d.data[0]) \n                        : d.depth === 2 ? txtColor(d.parent.data[0])\n                        : d.depth === 3 ? txtColor(d.parent.parent.data[0])\n                        : 'white'\n                    })\n        }\n\n        function zoomin(root) {\n            if (root.parent) {\n                console.log(platform)\n                select(node)\n                    .selectAll('*')\n                    .remove()\n                render(root)\n            }\n        }\n\n        function zoomout(root) {\n            if (root.parent) { \n                select(node)\n                    .selectAll(\"*\")\n                    .remove()\n                render(root.parent)\n            }\n        }\n\n        render(root)\n    }\n\nrender() {\n    return (\n        <svg ref={this.state.ref} viewBox={`-5 -20 ${this.props.width+20} ${this.props.height+20}`}/>\n    );\n   }\n}\n\nexport default Treemap;"],"names":["Treemap","props","state","ref","React","createTreemap","bind","this","data","console","log","node","current","x","scaleLinear","rangeRound","width","y","height","platform","color","type","genre","scaleOrdinal","domain","range","txtColor","groups","rollup","v","length","d","root","hierarchy","render","depth","x0","x1","y0","y1","select","selectAll","descendants","enter","filter","append","attr","style","parent","on","event","remove","zoomout","zoomin","text","value","sum","sort","a","b","treemap","size","paddingTop","paddingRight","paddingLeft","paddingBottom","paddingInner","viewBox"],"sourceRoot":""}