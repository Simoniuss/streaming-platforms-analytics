{"version":3,"file":"static/js/990.fbc491e2.chunk.js","mappings":"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","sources":["Dashboard/VisualizationComponents/Treemap.js"],"sourcesContent":["import React from 'react'\n\nimport { select } from 'd3-selection'\nimport { treemap, hierarchy } from 'd3-hierarchy'\nimport { rollup } from 'd3-array'\nimport { scaleOrdinal, scaleLinear } from 'd3-scale'\n\n\n\nclass Treemap extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            ref: React.createRef(),\n        }\n        this.createTreemap = this.createTreemap.bind(this)\n    }\n\n    componentDidMount() {\n        this.props.data? this.createTreemap() : console.log('no data')\n    }\n\n   componentDidUpdate() {\n        this.props.data? this.createTreemap() : console.log('no data')\n    }\n\n    createTreemap() {\n        // refrence to svg\n        const node = this.state.ref.current\n        clean()\n\n        const x = scaleLinear().rangeRound([0, this.props.width])\n        const y = scaleLinear().rangeRound([0, this.props.height])\n\n        // color of boxes\n        var color = scaleOrdinal()\n            .domain(['Netflix', 'Prime', 'Disney'])\n            .range([ \"#B81D24\", \"#00A8E1\", \"#113CCF\"])\n\n        var txtColor = scaleOrdinal()\n            .domain(['Netflix', 'Prime', 'Disney'])\n            .range([ \"white\", \"black\", \"white\"])\n\n\n        // group by platform, type, and the first genre\n        var groups = rollup(this.props.data,\n                            v => v.length,\n                            d => d.platform,\n                            d => d.type,\n                            function(d) { return d.genre[0]; }\n                            )\n        \n        // root hierarchy \n        var root = hierarchy(groups);\n        root.sum(function(d) { return d[1];})\n            .sort((a, b) => b.height - a.height || b.value - a.value);\n\n        // treemap layout\n        treemap()\n            .size([this.props.width, this.props.height])\n            .paddingTop(20)\n            .paddingRight(1)\n            .paddingLeft(1)\n            .paddingBottom(2)\n            .paddingInner(0)\n        (root)\n        \n        //console.log(this.props.data[1])\n        //console.log(root.leaves())\n\n        // find the node to show of the hierarchy\n        // genre and type are the same for all nodes because to group by genre I save only the first genre of the list\n        this.props.genre?\n            render(root.find(d => d.data[0] === this.props.platform)\n                .find(d => d.data[0] === this.props.type))\n            : this.props.type?\n                render(root.find(d => d.data[0] === this.props.platform)\n                    .find(d => d.data[0] === this.props.type))\n            : this.props.platform?\n                render(root.find(d => d.data[0] === this.props.platform))\n            : render(root)\n\n        // render the treemap given the svg node and the root from which draw rectangles\n        function render(root) {\n            // used to make responsive the treemap\n            x.domain([root.x0, root.x1])\n            y.domain([root.y0, root.y1])\n\n            // draw the rectangles\n            select(node)\n                .selectAll(\"rect\")\n                .data(root.descendants())\n                .enter()\n                .append(\"rect\")\n                    .attr('x', function (d) { return x(d.x0); })\n                    .attr('y', function (d) { return y(d.y0); })\n                    .attr('width', function (d) { return x(d.x1) - x(d.x0); })\n                    .attr('height', function (d) { return y(d.y1) - y(d.y0); })\n                    .style(\"stroke\", \"white\")\n                    .style(\"fill\", function(d) {\n                        return d.depth === 1 ? color(d.data[0]) \n                        : d.depth === 2 ? color(d.parent.data[0])\n                        : d.depth === 3 ? color(d.parent.parent.data[0])\n                        : '#282626'\n                    })\n            \n            // set text of treemap\n            select(node)\n                .selectAll(\"text\")\n                .data(root.descendants())\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", function(d){ return x(d.x0)+5})\n                    .attr(\"y\", function(d){ return y(d.y0)+15})\n                    .text(function(d){ \n                        return d.depth === 0? \"All\"\n                        : x(d.x1)-x(d.x0) > 40 && y(d.y1)-y(d.y0) > 20? d.data[0]\n                        : \"...\"\n                    })\n                    .attr(\"font-size\", function(d) {\n                        return x(d.x1)-x(d.x0) > 100 && y(d.y1)-y(d.y0) > 20? \"1.2em\"\n                        : x(d.x1)-x(d.x0) > 60 && y(d.y1)-y(d.y0) > 20? \"0.8em\"\n                        : x(d.x1)-x(d.x0) > 30 && y(d.y1)-y(d.y0) > 20? \"0.6em\"\n                        : \"0.4em\"})\n                    .attr('font-weight', 'bold')\n                    .attr(\"fill\", function(d) {\n                        return d.depth === 1 ? txtColor(d.data[0]) \n                        : d.depth === 2 ? txtColor(d.parent.data[0])\n                        : d.depth === 3 ? txtColor(d.parent.parent.data[0])\n                        : 'white'\n                    })\n        }\n\n        function clean() {\n            select(node)\n                .selectAll(\"*\")\n                .remove()\n        }\n    }\n\nrender() {\n    return (\n        <svg ref={this.state.ref} viewBox={`-5 -20 ${this.props.width+30} ${this.props.height+20}`}/>\n    );\n   }\n}\n\nexport default Treemap;"],"names":["Treemap","props","state","ref","React","createTreemap","bind","this","data","console","log","node","current","select","selectAll","remove","x","scaleLinear","rangeRound","width","y","height","color","scaleOrdinal","domain","range","txtColor","groups","rollup","v","length","d","platform","type","genre","root","hierarchy","render","x0","x1","y0","y1","descendants","enter","append","attr","style","depth","parent","text","sum","sort","a","b","value","treemap","size","paddingTop","paddingRight","paddingLeft","paddingBottom","paddingInner","find","viewBox"],"sourceRoot":""}